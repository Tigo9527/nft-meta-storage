// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"
	"nft.house/service/db_models"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newFileTxQueue(db *gorm.DB, opts ...gen.DOOption) fileTxQueue {
	_fileTxQueue := fileTxQueue{}

	_fileTxQueue.fileTxQueueDo.UseDB(db, opts...)
	_fileTxQueue.fileTxQueueDo.UseModel(&db_models.FileTxQueue{})

	tableName := _fileTxQueue.fileTxQueueDo.TableName()
	_fileTxQueue.ALL = field.NewAsterisk(tableName)
	_fileTxQueue.Id = field.NewInt64(tableName, "id")
	_fileTxQueue.FileId = field.NewInt64(tableName, "file_id")
	_fileTxQueue.CreatedAt = field.NewTime(tableName, "created_at")

	_fileTxQueue.fillFieldMap()

	return _fileTxQueue
}

type fileTxQueue struct {
	fileTxQueueDo

	ALL       field.Asterisk
	Id        field.Int64
	FileId    field.Int64
	CreatedAt field.Time

	fieldMap map[string]field.Expr
}

func (f fileTxQueue) Table(newTableName string) *fileTxQueue {
	f.fileTxQueueDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fileTxQueue) As(alias string) *fileTxQueue {
	f.fileTxQueueDo.DO = *(f.fileTxQueueDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fileTxQueue) updateTableName(table string) *fileTxQueue {
	f.ALL = field.NewAsterisk(table)
	f.Id = field.NewInt64(table, "id")
	f.FileId = field.NewInt64(table, "file_id")
	f.CreatedAt = field.NewTime(table, "created_at")

	f.fillFieldMap()

	return f
}

func (f *fileTxQueue) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fileTxQueue) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 3)
	f.fieldMap["id"] = f.Id
	f.fieldMap["file_id"] = f.FileId
	f.fieldMap["created_at"] = f.CreatedAt
}

func (f fileTxQueue) clone(db *gorm.DB) fileTxQueue {
	f.fileTxQueueDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fileTxQueue) replaceDB(db *gorm.DB) fileTxQueue {
	f.fileTxQueueDo.ReplaceDB(db)
	return f
}

type fileTxQueueDo struct{ gen.DO }

type IFileTxQueueDo interface {
	gen.SubQuery
	Debug() IFileTxQueueDo
	WithContext(ctx context.Context) IFileTxQueueDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFileTxQueueDo
	WriteDB() IFileTxQueueDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFileTxQueueDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFileTxQueueDo
	Not(conds ...gen.Condition) IFileTxQueueDo
	Or(conds ...gen.Condition) IFileTxQueueDo
	Select(conds ...field.Expr) IFileTxQueueDo
	Where(conds ...gen.Condition) IFileTxQueueDo
	Order(conds ...field.Expr) IFileTxQueueDo
	Distinct(cols ...field.Expr) IFileTxQueueDo
	Omit(cols ...field.Expr) IFileTxQueueDo
	Join(table schema.Tabler, on ...field.Expr) IFileTxQueueDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFileTxQueueDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFileTxQueueDo
	Group(cols ...field.Expr) IFileTxQueueDo
	Having(conds ...gen.Condition) IFileTxQueueDo
	Limit(limit int) IFileTxQueueDo
	Offset(offset int) IFileTxQueueDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFileTxQueueDo
	Unscoped() IFileTxQueueDo
	Create(values ...*db_models.FileTxQueue) error
	CreateInBatches(values []*db_models.FileTxQueue, batchSize int) error
	Save(values ...*db_models.FileTxQueue) error
	First() (*db_models.FileTxQueue, error)
	Take() (*db_models.FileTxQueue, error)
	Last() (*db_models.FileTxQueue, error)
	Find() ([]*db_models.FileTxQueue, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*db_models.FileTxQueue, err error)
	FindInBatches(result *[]*db_models.FileTxQueue, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*db_models.FileTxQueue) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFileTxQueueDo
	Assign(attrs ...field.AssignExpr) IFileTxQueueDo
	Joins(fields ...field.RelationField) IFileTxQueueDo
	Preload(fields ...field.RelationField) IFileTxQueueDo
	FirstOrInit() (*db_models.FileTxQueue, error)
	FirstOrCreate() (*db_models.FileTxQueue, error)
	FindByPage(offset int, limit int) (result []*db_models.FileTxQueue, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFileTxQueueDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f fileTxQueueDo) Debug() IFileTxQueueDo {
	return f.withDO(f.DO.Debug())
}

func (f fileTxQueueDo) WithContext(ctx context.Context) IFileTxQueueDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fileTxQueueDo) ReadDB() IFileTxQueueDo {
	return f.Clauses(dbresolver.Read)
}

func (f fileTxQueueDo) WriteDB() IFileTxQueueDo {
	return f.Clauses(dbresolver.Write)
}

func (f fileTxQueueDo) Session(config *gorm.Session) IFileTxQueueDo {
	return f.withDO(f.DO.Session(config))
}

func (f fileTxQueueDo) Clauses(conds ...clause.Expression) IFileTxQueueDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fileTxQueueDo) Returning(value interface{}, columns ...string) IFileTxQueueDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fileTxQueueDo) Not(conds ...gen.Condition) IFileTxQueueDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f fileTxQueueDo) Or(conds ...gen.Condition) IFileTxQueueDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f fileTxQueueDo) Select(conds ...field.Expr) IFileTxQueueDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f fileTxQueueDo) Where(conds ...gen.Condition) IFileTxQueueDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f fileTxQueueDo) Order(conds ...field.Expr) IFileTxQueueDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f fileTxQueueDo) Distinct(cols ...field.Expr) IFileTxQueueDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fileTxQueueDo) Omit(cols ...field.Expr) IFileTxQueueDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fileTxQueueDo) Join(table schema.Tabler, on ...field.Expr) IFileTxQueueDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fileTxQueueDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFileTxQueueDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fileTxQueueDo) RightJoin(table schema.Tabler, on ...field.Expr) IFileTxQueueDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fileTxQueueDo) Group(cols ...field.Expr) IFileTxQueueDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f fileTxQueueDo) Having(conds ...gen.Condition) IFileTxQueueDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f fileTxQueueDo) Limit(limit int) IFileTxQueueDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f fileTxQueueDo) Offset(offset int) IFileTxQueueDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f fileTxQueueDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFileTxQueueDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fileTxQueueDo) Unscoped() IFileTxQueueDo {
	return f.withDO(f.DO.Unscoped())
}

func (f fileTxQueueDo) Create(values ...*db_models.FileTxQueue) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fileTxQueueDo) CreateInBatches(values []*db_models.FileTxQueue, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fileTxQueueDo) Save(values ...*db_models.FileTxQueue) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fileTxQueueDo) First() (*db_models.FileTxQueue, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*db_models.FileTxQueue), nil
	}
}

func (f fileTxQueueDo) Take() (*db_models.FileTxQueue, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*db_models.FileTxQueue), nil
	}
}

func (f fileTxQueueDo) Last() (*db_models.FileTxQueue, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*db_models.FileTxQueue), nil
	}
}

func (f fileTxQueueDo) Find() ([]*db_models.FileTxQueue, error) {
	result, err := f.DO.Find()
	return result.([]*db_models.FileTxQueue), err
}

func (f fileTxQueueDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*db_models.FileTxQueue, err error) {
	buf := make([]*db_models.FileTxQueue, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fileTxQueueDo) FindInBatches(result *[]*db_models.FileTxQueue, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fileTxQueueDo) Attrs(attrs ...field.AssignExpr) IFileTxQueueDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fileTxQueueDo) Assign(attrs ...field.AssignExpr) IFileTxQueueDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fileTxQueueDo) Joins(fields ...field.RelationField) IFileTxQueueDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fileTxQueueDo) Preload(fields ...field.RelationField) IFileTxQueueDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fileTxQueueDo) FirstOrInit() (*db_models.FileTxQueue, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*db_models.FileTxQueue), nil
	}
}

func (f fileTxQueueDo) FirstOrCreate() (*db_models.FileTxQueue, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*db_models.FileTxQueue), nil
	}
}

func (f fileTxQueueDo) FindByPage(offset int, limit int) (result []*db_models.FileTxQueue, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fileTxQueueDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f fileTxQueueDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f fileTxQueueDo) Delete(models ...*db_models.FileTxQueue) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *fileTxQueueDo) withDO(do gen.Dao) *fileTxQueueDo {
	f.DO = *do.(*gen.DO)
	return f
}
