// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"
	"nft.house/service/db_models"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newHex64(db *gorm.DB, opts ...gen.DOOption) hex64 {
	_hex64 := hex64{}

	_hex64.hex64Do.UseDB(db, opts...)
	_hex64.hex64Do.UseModel(&db_models.Hex64{})

	tableName := _hex64.hex64Do.TableName()
	_hex64.ALL = field.NewAsterisk(tableName)
	_hex64.Id = field.NewInt64(tableName, "id")
	_hex64.Hex = field.NewString(tableName, "hex")

	_hex64.fillFieldMap()

	return _hex64
}

type hex64 struct {
	hex64Do

	ALL field.Asterisk
	Id  field.Int64
	Hex field.String

	fieldMap map[string]field.Expr
}

func (h hex64) Table(newTableName string) *hex64 {
	h.hex64Do.UseTable(newTableName)
	return h.updateTableName(newTableName)
}

func (h hex64) As(alias string) *hex64 {
	h.hex64Do.DO = *(h.hex64Do.As(alias).(*gen.DO))
	return h.updateTableName(alias)
}

func (h *hex64) updateTableName(table string) *hex64 {
	h.ALL = field.NewAsterisk(table)
	h.Id = field.NewInt64(table, "id")
	h.Hex = field.NewString(table, "hex")

	h.fillFieldMap()

	return h
}

func (h *hex64) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := h.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (h *hex64) fillFieldMap() {
	h.fieldMap = make(map[string]field.Expr, 2)
	h.fieldMap["id"] = h.Id
	h.fieldMap["hex"] = h.Hex
}

func (h hex64) clone(db *gorm.DB) hex64 {
	h.hex64Do.ReplaceConnPool(db.Statement.ConnPool)
	return h
}

func (h hex64) replaceDB(db *gorm.DB) hex64 {
	h.hex64Do.ReplaceDB(db)
	return h
}

type hex64Do struct{ gen.DO }

type IHex64Do interface {
	gen.SubQuery
	Debug() IHex64Do
	WithContext(ctx context.Context) IHex64Do
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IHex64Do
	WriteDB() IHex64Do
	As(alias string) gen.Dao
	Session(config *gorm.Session) IHex64Do
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IHex64Do
	Not(conds ...gen.Condition) IHex64Do
	Or(conds ...gen.Condition) IHex64Do
	Select(conds ...field.Expr) IHex64Do
	Where(conds ...gen.Condition) IHex64Do
	Order(conds ...field.Expr) IHex64Do
	Distinct(cols ...field.Expr) IHex64Do
	Omit(cols ...field.Expr) IHex64Do
	Join(table schema.Tabler, on ...field.Expr) IHex64Do
	LeftJoin(table schema.Tabler, on ...field.Expr) IHex64Do
	RightJoin(table schema.Tabler, on ...field.Expr) IHex64Do
	Group(cols ...field.Expr) IHex64Do
	Having(conds ...gen.Condition) IHex64Do
	Limit(limit int) IHex64Do
	Offset(offset int) IHex64Do
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IHex64Do
	Unscoped() IHex64Do
	Create(values ...*db_models.Hex64) error
	CreateInBatches(values []*db_models.Hex64, batchSize int) error
	Save(values ...*db_models.Hex64) error
	First() (*db_models.Hex64, error)
	Take() (*db_models.Hex64, error)
	Last() (*db_models.Hex64, error)
	Find() ([]*db_models.Hex64, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*db_models.Hex64, err error)
	FindInBatches(result *[]*db_models.Hex64, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*db_models.Hex64) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IHex64Do
	Assign(attrs ...field.AssignExpr) IHex64Do
	Joins(fields ...field.RelationField) IHex64Do
	Preload(fields ...field.RelationField) IHex64Do
	FirstOrInit() (*db_models.Hex64, error)
	FirstOrCreate() (*db_models.Hex64, error)
	FindByPage(offset int, limit int) (result []*db_models.Hex64, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IHex64Do
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (h hex64Do) Debug() IHex64Do {
	return h.withDO(h.DO.Debug())
}

func (h hex64Do) WithContext(ctx context.Context) IHex64Do {
	return h.withDO(h.DO.WithContext(ctx))
}

func (h hex64Do) ReadDB() IHex64Do {
	return h.Clauses(dbresolver.Read)
}

func (h hex64Do) WriteDB() IHex64Do {
	return h.Clauses(dbresolver.Write)
}

func (h hex64Do) Session(config *gorm.Session) IHex64Do {
	return h.withDO(h.DO.Session(config))
}

func (h hex64Do) Clauses(conds ...clause.Expression) IHex64Do {
	return h.withDO(h.DO.Clauses(conds...))
}

func (h hex64Do) Returning(value interface{}, columns ...string) IHex64Do {
	return h.withDO(h.DO.Returning(value, columns...))
}

func (h hex64Do) Not(conds ...gen.Condition) IHex64Do {
	return h.withDO(h.DO.Not(conds...))
}

func (h hex64Do) Or(conds ...gen.Condition) IHex64Do {
	return h.withDO(h.DO.Or(conds...))
}

func (h hex64Do) Select(conds ...field.Expr) IHex64Do {
	return h.withDO(h.DO.Select(conds...))
}

func (h hex64Do) Where(conds ...gen.Condition) IHex64Do {
	return h.withDO(h.DO.Where(conds...))
}

func (h hex64Do) Order(conds ...field.Expr) IHex64Do {
	return h.withDO(h.DO.Order(conds...))
}

func (h hex64Do) Distinct(cols ...field.Expr) IHex64Do {
	return h.withDO(h.DO.Distinct(cols...))
}

func (h hex64Do) Omit(cols ...field.Expr) IHex64Do {
	return h.withDO(h.DO.Omit(cols...))
}

func (h hex64Do) Join(table schema.Tabler, on ...field.Expr) IHex64Do {
	return h.withDO(h.DO.Join(table, on...))
}

func (h hex64Do) LeftJoin(table schema.Tabler, on ...field.Expr) IHex64Do {
	return h.withDO(h.DO.LeftJoin(table, on...))
}

func (h hex64Do) RightJoin(table schema.Tabler, on ...field.Expr) IHex64Do {
	return h.withDO(h.DO.RightJoin(table, on...))
}

func (h hex64Do) Group(cols ...field.Expr) IHex64Do {
	return h.withDO(h.DO.Group(cols...))
}

func (h hex64Do) Having(conds ...gen.Condition) IHex64Do {
	return h.withDO(h.DO.Having(conds...))
}

func (h hex64Do) Limit(limit int) IHex64Do {
	return h.withDO(h.DO.Limit(limit))
}

func (h hex64Do) Offset(offset int) IHex64Do {
	return h.withDO(h.DO.Offset(offset))
}

func (h hex64Do) Scopes(funcs ...func(gen.Dao) gen.Dao) IHex64Do {
	return h.withDO(h.DO.Scopes(funcs...))
}

func (h hex64Do) Unscoped() IHex64Do {
	return h.withDO(h.DO.Unscoped())
}

func (h hex64Do) Create(values ...*db_models.Hex64) error {
	if len(values) == 0 {
		return nil
	}
	return h.DO.Create(values)
}

func (h hex64Do) CreateInBatches(values []*db_models.Hex64, batchSize int) error {
	return h.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (h hex64Do) Save(values ...*db_models.Hex64) error {
	if len(values) == 0 {
		return nil
	}
	return h.DO.Save(values)
}

func (h hex64Do) First() (*db_models.Hex64, error) {
	if result, err := h.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*db_models.Hex64), nil
	}
}

func (h hex64Do) Take() (*db_models.Hex64, error) {
	if result, err := h.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*db_models.Hex64), nil
	}
}

func (h hex64Do) Last() (*db_models.Hex64, error) {
	if result, err := h.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*db_models.Hex64), nil
	}
}

func (h hex64Do) Find() ([]*db_models.Hex64, error) {
	result, err := h.DO.Find()
	return result.([]*db_models.Hex64), err
}

func (h hex64Do) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*db_models.Hex64, err error) {
	buf := make([]*db_models.Hex64, 0, batchSize)
	err = h.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (h hex64Do) FindInBatches(result *[]*db_models.Hex64, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return h.DO.FindInBatches(result, batchSize, fc)
}

func (h hex64Do) Attrs(attrs ...field.AssignExpr) IHex64Do {
	return h.withDO(h.DO.Attrs(attrs...))
}

func (h hex64Do) Assign(attrs ...field.AssignExpr) IHex64Do {
	return h.withDO(h.DO.Assign(attrs...))
}

func (h hex64Do) Joins(fields ...field.RelationField) IHex64Do {
	for _, _f := range fields {
		h = *h.withDO(h.DO.Joins(_f))
	}
	return &h
}

func (h hex64Do) Preload(fields ...field.RelationField) IHex64Do {
	for _, _f := range fields {
		h = *h.withDO(h.DO.Preload(_f))
	}
	return &h
}

func (h hex64Do) FirstOrInit() (*db_models.Hex64, error) {
	if result, err := h.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*db_models.Hex64), nil
	}
}

func (h hex64Do) FirstOrCreate() (*db_models.Hex64, error) {
	if result, err := h.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*db_models.Hex64), nil
	}
}

func (h hex64Do) FindByPage(offset int, limit int) (result []*db_models.Hex64, count int64, err error) {
	result, err = h.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = h.Offset(-1).Limit(-1).Count()
	return
}

func (h hex64Do) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = h.Count()
	if err != nil {
		return
	}

	err = h.Offset(offset).Limit(limit).Scan(result)
	return
}

func (h hex64Do) Scan(result interface{}) (err error) {
	return h.DO.Scan(result)
}

func (h hex64Do) Delete(models ...*db_models.Hex64) (result gen.ResultInfo, err error) {
	return h.DO.Delete(models)
}

func (h *hex64Do) withDO(do gen.Dao) *hex64Do {
	h.DO = *do.(*gen.DO)
	return h
}
