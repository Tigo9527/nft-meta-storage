// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"
	"nft.house/service/db_models"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newFileStoreQueue(db *gorm.DB, opts ...gen.DOOption) fileStoreQueue {
	_fileStoreQueue := fileStoreQueue{}

	_fileStoreQueue.fileStoreQueueDo.UseDB(db, opts...)
	_fileStoreQueue.fileStoreQueueDo.UseModel(&db_models.FileStoreQueue{})

	tableName := _fileStoreQueue.fileStoreQueueDo.TableName()
	_fileStoreQueue.ALL = field.NewAsterisk(tableName)
	_fileStoreQueue.Id = field.NewInt64(tableName, "id")
	_fileStoreQueue.RootId = field.NewInt64(tableName, "root_id")
	_fileStoreQueue.Step = field.NewString(tableName, "step")
	_fileStoreQueue.CreatedAt = field.NewTime(tableName, "created_at")

	_fileStoreQueue.fillFieldMap()

	return _fileStoreQueue
}

type fileStoreQueue struct {
	fileStoreQueueDo

	ALL       field.Asterisk
	Id        field.Int64
	RootId    field.Int64
	Step      field.String
	CreatedAt field.Time

	fieldMap map[string]field.Expr
}

func (f fileStoreQueue) Table(newTableName string) *fileStoreQueue {
	f.fileStoreQueueDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fileStoreQueue) As(alias string) *fileStoreQueue {
	f.fileStoreQueueDo.DO = *(f.fileStoreQueueDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fileStoreQueue) updateTableName(table string) *fileStoreQueue {
	f.ALL = field.NewAsterisk(table)
	f.Id = field.NewInt64(table, "id")
	f.RootId = field.NewInt64(table, "root_id")
	f.Step = field.NewString(table, "step")
	f.CreatedAt = field.NewTime(table, "created_at")

	f.fillFieldMap()

	return f
}

func (f *fileStoreQueue) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fileStoreQueue) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 4)
	f.fieldMap["id"] = f.Id
	f.fieldMap["root_id"] = f.RootId
	f.fieldMap["step"] = f.Step
	f.fieldMap["created_at"] = f.CreatedAt
}

func (f fileStoreQueue) clone(db *gorm.DB) fileStoreQueue {
	f.fileStoreQueueDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fileStoreQueue) replaceDB(db *gorm.DB) fileStoreQueue {
	f.fileStoreQueueDo.ReplaceDB(db)
	return f
}

type fileStoreQueueDo struct{ gen.DO }

type IFileStoreQueueDo interface {
	gen.SubQuery
	Debug() IFileStoreQueueDo
	WithContext(ctx context.Context) IFileStoreQueueDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFileStoreQueueDo
	WriteDB() IFileStoreQueueDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFileStoreQueueDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFileStoreQueueDo
	Not(conds ...gen.Condition) IFileStoreQueueDo
	Or(conds ...gen.Condition) IFileStoreQueueDo
	Select(conds ...field.Expr) IFileStoreQueueDo
	Where(conds ...gen.Condition) IFileStoreQueueDo
	Order(conds ...field.Expr) IFileStoreQueueDo
	Distinct(cols ...field.Expr) IFileStoreQueueDo
	Omit(cols ...field.Expr) IFileStoreQueueDo
	Join(table schema.Tabler, on ...field.Expr) IFileStoreQueueDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFileStoreQueueDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFileStoreQueueDo
	Group(cols ...field.Expr) IFileStoreQueueDo
	Having(conds ...gen.Condition) IFileStoreQueueDo
	Limit(limit int) IFileStoreQueueDo
	Offset(offset int) IFileStoreQueueDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFileStoreQueueDo
	Unscoped() IFileStoreQueueDo
	Create(values ...*db_models.FileStoreQueue) error
	CreateInBatches(values []*db_models.FileStoreQueue, batchSize int) error
	Save(values ...*db_models.FileStoreQueue) error
	First() (*db_models.FileStoreQueue, error)
	Take() (*db_models.FileStoreQueue, error)
	Last() (*db_models.FileStoreQueue, error)
	Find() ([]*db_models.FileStoreQueue, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*db_models.FileStoreQueue, err error)
	FindInBatches(result *[]*db_models.FileStoreQueue, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*db_models.FileStoreQueue) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFileStoreQueueDo
	Assign(attrs ...field.AssignExpr) IFileStoreQueueDo
	Joins(fields ...field.RelationField) IFileStoreQueueDo
	Preload(fields ...field.RelationField) IFileStoreQueueDo
	FirstOrInit() (*db_models.FileStoreQueue, error)
	FirstOrCreate() (*db_models.FileStoreQueue, error)
	FindByPage(offset int, limit int) (result []*db_models.FileStoreQueue, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFileStoreQueueDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f fileStoreQueueDo) Debug() IFileStoreQueueDo {
	return f.withDO(f.DO.Debug())
}

func (f fileStoreQueueDo) WithContext(ctx context.Context) IFileStoreQueueDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fileStoreQueueDo) ReadDB() IFileStoreQueueDo {
	return f.Clauses(dbresolver.Read)
}

func (f fileStoreQueueDo) WriteDB() IFileStoreQueueDo {
	return f.Clauses(dbresolver.Write)
}

func (f fileStoreQueueDo) Session(config *gorm.Session) IFileStoreQueueDo {
	return f.withDO(f.DO.Session(config))
}

func (f fileStoreQueueDo) Clauses(conds ...clause.Expression) IFileStoreQueueDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fileStoreQueueDo) Returning(value interface{}, columns ...string) IFileStoreQueueDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fileStoreQueueDo) Not(conds ...gen.Condition) IFileStoreQueueDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f fileStoreQueueDo) Or(conds ...gen.Condition) IFileStoreQueueDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f fileStoreQueueDo) Select(conds ...field.Expr) IFileStoreQueueDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f fileStoreQueueDo) Where(conds ...gen.Condition) IFileStoreQueueDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f fileStoreQueueDo) Order(conds ...field.Expr) IFileStoreQueueDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f fileStoreQueueDo) Distinct(cols ...field.Expr) IFileStoreQueueDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fileStoreQueueDo) Omit(cols ...field.Expr) IFileStoreQueueDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fileStoreQueueDo) Join(table schema.Tabler, on ...field.Expr) IFileStoreQueueDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fileStoreQueueDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFileStoreQueueDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fileStoreQueueDo) RightJoin(table schema.Tabler, on ...field.Expr) IFileStoreQueueDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fileStoreQueueDo) Group(cols ...field.Expr) IFileStoreQueueDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f fileStoreQueueDo) Having(conds ...gen.Condition) IFileStoreQueueDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f fileStoreQueueDo) Limit(limit int) IFileStoreQueueDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f fileStoreQueueDo) Offset(offset int) IFileStoreQueueDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f fileStoreQueueDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFileStoreQueueDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fileStoreQueueDo) Unscoped() IFileStoreQueueDo {
	return f.withDO(f.DO.Unscoped())
}

func (f fileStoreQueueDo) Create(values ...*db_models.FileStoreQueue) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fileStoreQueueDo) CreateInBatches(values []*db_models.FileStoreQueue, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fileStoreQueueDo) Save(values ...*db_models.FileStoreQueue) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fileStoreQueueDo) First() (*db_models.FileStoreQueue, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*db_models.FileStoreQueue), nil
	}
}

func (f fileStoreQueueDo) Take() (*db_models.FileStoreQueue, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*db_models.FileStoreQueue), nil
	}
}

func (f fileStoreQueueDo) Last() (*db_models.FileStoreQueue, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*db_models.FileStoreQueue), nil
	}
}

func (f fileStoreQueueDo) Find() ([]*db_models.FileStoreQueue, error) {
	result, err := f.DO.Find()
	return result.([]*db_models.FileStoreQueue), err
}

func (f fileStoreQueueDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*db_models.FileStoreQueue, err error) {
	buf := make([]*db_models.FileStoreQueue, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fileStoreQueueDo) FindInBatches(result *[]*db_models.FileStoreQueue, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fileStoreQueueDo) Attrs(attrs ...field.AssignExpr) IFileStoreQueueDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fileStoreQueueDo) Assign(attrs ...field.AssignExpr) IFileStoreQueueDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fileStoreQueueDo) Joins(fields ...field.RelationField) IFileStoreQueueDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fileStoreQueueDo) Preload(fields ...field.RelationField) IFileStoreQueueDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fileStoreQueueDo) FirstOrInit() (*db_models.FileStoreQueue, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*db_models.FileStoreQueue), nil
	}
}

func (f fileStoreQueueDo) FirstOrCreate() (*db_models.FileStoreQueue, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*db_models.FileStoreQueue), nil
	}
}

func (f fileStoreQueueDo) FindByPage(offset int, limit int) (result []*db_models.FileStoreQueue, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fileStoreQueueDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f fileStoreQueueDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f fileStoreQueueDo) Delete(models ...*db_models.FileStoreQueue) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *fileStoreQueueDo) withDO(do gen.Dao) *fileStoreQueueDo {
	f.DO = *do.(*gen.DO)
	return f
}
