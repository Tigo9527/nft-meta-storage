// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"
	"nft.house/service/db_models"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newFileEntry(db *gorm.DB, opts ...gen.DOOption) fileEntry {
	_fileEntry := fileEntry{}

	_fileEntry.fileEntryDo.UseDB(db, opts...)
	_fileEntry.fileEntryDo.UseModel(&db_models.FileEntry{})

	tableName := _fileEntry.fileEntryDo.TableName()
	_fileEntry.ALL = field.NewAsterisk(tableName)
	_fileEntry.Id = field.NewInt64(tableName, "id")
	_fileEntry.UserId = field.NewInt64(tableName, "user_id")
	_fileEntry.Name = field.NewString(tableName, "name")
	_fileEntry.Size = field.NewInt64(tableName, "size")
	_fileEntry.RootId = field.NewInt64(tableName, "root_id")
	_fileEntry.CreatedAt = field.NewTime(tableName, "created_at")
	_fileEntry.UpdatedAt = field.NewTime(tableName, "updated_at")

	_fileEntry.fillFieldMap()

	return _fileEntry
}

type fileEntry struct {
	fileEntryDo

	ALL       field.Asterisk
	Id        field.Int64
	UserId    field.Int64
	Name      field.String
	Size      field.Int64
	RootId    field.Int64
	CreatedAt field.Time
	UpdatedAt field.Time

	fieldMap map[string]field.Expr
}

func (f fileEntry) Table(newTableName string) *fileEntry {
	f.fileEntryDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fileEntry) As(alias string) *fileEntry {
	f.fileEntryDo.DO = *(f.fileEntryDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fileEntry) updateTableName(table string) *fileEntry {
	f.ALL = field.NewAsterisk(table)
	f.Id = field.NewInt64(table, "id")
	f.UserId = field.NewInt64(table, "user_id")
	f.Name = field.NewString(table, "name")
	f.Size = field.NewInt64(table, "size")
	f.RootId = field.NewInt64(table, "root_id")
	f.CreatedAt = field.NewTime(table, "created_at")
	f.UpdatedAt = field.NewTime(table, "updated_at")

	f.fillFieldMap()

	return f
}

func (f *fileEntry) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fileEntry) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 7)
	f.fieldMap["id"] = f.Id
	f.fieldMap["user_id"] = f.UserId
	f.fieldMap["name"] = f.Name
	f.fieldMap["size"] = f.Size
	f.fieldMap["root_id"] = f.RootId
	f.fieldMap["created_at"] = f.CreatedAt
	f.fieldMap["updated_at"] = f.UpdatedAt
}

func (f fileEntry) clone(db *gorm.DB) fileEntry {
	f.fileEntryDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fileEntry) replaceDB(db *gorm.DB) fileEntry {
	f.fileEntryDo.ReplaceDB(db)
	return f
}

type fileEntryDo struct{ gen.DO }

type IFileEntryDo interface {
	gen.SubQuery
	Debug() IFileEntryDo
	WithContext(ctx context.Context) IFileEntryDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFileEntryDo
	WriteDB() IFileEntryDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFileEntryDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFileEntryDo
	Not(conds ...gen.Condition) IFileEntryDo
	Or(conds ...gen.Condition) IFileEntryDo
	Select(conds ...field.Expr) IFileEntryDo
	Where(conds ...gen.Condition) IFileEntryDo
	Order(conds ...field.Expr) IFileEntryDo
	Distinct(cols ...field.Expr) IFileEntryDo
	Omit(cols ...field.Expr) IFileEntryDo
	Join(table schema.Tabler, on ...field.Expr) IFileEntryDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFileEntryDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFileEntryDo
	Group(cols ...field.Expr) IFileEntryDo
	Having(conds ...gen.Condition) IFileEntryDo
	Limit(limit int) IFileEntryDo
	Offset(offset int) IFileEntryDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFileEntryDo
	Unscoped() IFileEntryDo
	Create(values ...*db_models.FileEntry) error
	CreateInBatches(values []*db_models.FileEntry, batchSize int) error
	Save(values ...*db_models.FileEntry) error
	First() (*db_models.FileEntry, error)
	Take() (*db_models.FileEntry, error)
	Last() (*db_models.FileEntry, error)
	Find() ([]*db_models.FileEntry, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*db_models.FileEntry, err error)
	FindInBatches(result *[]*db_models.FileEntry, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*db_models.FileEntry) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFileEntryDo
	Assign(attrs ...field.AssignExpr) IFileEntryDo
	Joins(fields ...field.RelationField) IFileEntryDo
	Preload(fields ...field.RelationField) IFileEntryDo
	FirstOrInit() (*db_models.FileEntry, error)
	FirstOrCreate() (*db_models.FileEntry, error)
	FindByPage(offset int, limit int) (result []*db_models.FileEntry, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFileEntryDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f fileEntryDo) Debug() IFileEntryDo {
	return f.withDO(f.DO.Debug())
}

func (f fileEntryDo) WithContext(ctx context.Context) IFileEntryDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fileEntryDo) ReadDB() IFileEntryDo {
	return f.Clauses(dbresolver.Read)
}

func (f fileEntryDo) WriteDB() IFileEntryDo {
	return f.Clauses(dbresolver.Write)
}

func (f fileEntryDo) Session(config *gorm.Session) IFileEntryDo {
	return f.withDO(f.DO.Session(config))
}

func (f fileEntryDo) Clauses(conds ...clause.Expression) IFileEntryDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fileEntryDo) Returning(value interface{}, columns ...string) IFileEntryDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fileEntryDo) Not(conds ...gen.Condition) IFileEntryDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f fileEntryDo) Or(conds ...gen.Condition) IFileEntryDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f fileEntryDo) Select(conds ...field.Expr) IFileEntryDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f fileEntryDo) Where(conds ...gen.Condition) IFileEntryDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f fileEntryDo) Order(conds ...field.Expr) IFileEntryDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f fileEntryDo) Distinct(cols ...field.Expr) IFileEntryDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fileEntryDo) Omit(cols ...field.Expr) IFileEntryDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fileEntryDo) Join(table schema.Tabler, on ...field.Expr) IFileEntryDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fileEntryDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFileEntryDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fileEntryDo) RightJoin(table schema.Tabler, on ...field.Expr) IFileEntryDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fileEntryDo) Group(cols ...field.Expr) IFileEntryDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f fileEntryDo) Having(conds ...gen.Condition) IFileEntryDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f fileEntryDo) Limit(limit int) IFileEntryDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f fileEntryDo) Offset(offset int) IFileEntryDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f fileEntryDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFileEntryDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fileEntryDo) Unscoped() IFileEntryDo {
	return f.withDO(f.DO.Unscoped())
}

func (f fileEntryDo) Create(values ...*db_models.FileEntry) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fileEntryDo) CreateInBatches(values []*db_models.FileEntry, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fileEntryDo) Save(values ...*db_models.FileEntry) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fileEntryDo) First() (*db_models.FileEntry, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*db_models.FileEntry), nil
	}
}

func (f fileEntryDo) Take() (*db_models.FileEntry, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*db_models.FileEntry), nil
	}
}

func (f fileEntryDo) Last() (*db_models.FileEntry, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*db_models.FileEntry), nil
	}
}

func (f fileEntryDo) Find() ([]*db_models.FileEntry, error) {
	result, err := f.DO.Find()
	return result.([]*db_models.FileEntry), err
}

func (f fileEntryDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*db_models.FileEntry, err error) {
	buf := make([]*db_models.FileEntry, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fileEntryDo) FindInBatches(result *[]*db_models.FileEntry, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fileEntryDo) Attrs(attrs ...field.AssignExpr) IFileEntryDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fileEntryDo) Assign(attrs ...field.AssignExpr) IFileEntryDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fileEntryDo) Joins(fields ...field.RelationField) IFileEntryDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fileEntryDo) Preload(fields ...field.RelationField) IFileEntryDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fileEntryDo) FirstOrInit() (*db_models.FileEntry, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*db_models.FileEntry), nil
	}
}

func (f fileEntryDo) FirstOrCreate() (*db_models.FileEntry, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*db_models.FileEntry), nil
	}
}

func (f fileEntryDo) FindByPage(offset int, limit int) (result []*db_models.FileEntry, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fileEntryDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f fileEntryDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f fileEntryDo) Delete(models ...*db_models.FileEntry) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *fileEntryDo) withDO(do gen.Dao) *fileEntryDo {
	f.DO = *do.(*gen.DO)
	return f
}
