// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"
	"nft.house/service/db_models"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newResourceMap(db *gorm.DB, opts ...gen.DOOption) resourceMap {
	_resourceMap := resourceMap{}

	_resourceMap.resourceMapDo.UseDB(db, opts...)
	_resourceMap.resourceMapDo.UseModel(&db_models.ResourceMap{})

	tableName := _resourceMap.resourceMapDo.TableName()
	_resourceMap.ALL = field.NewAsterisk(tableName)
	_resourceMap.Id = field.NewInt64(tableName, "id")
	_resourceMap.HexId = field.NewInt64(tableName, "hex_id")
	_resourceMap.Resource = field.NewString(tableName, "resource")
	_resourceMap.FileId = field.NewInt64(tableName, "file_id")

	_resourceMap.fillFieldMap()

	return _resourceMap
}

type resourceMap struct {
	resourceMapDo

	ALL      field.Asterisk
	Id       field.Int64
	HexId    field.Int64
	Resource field.String
	FileId   field.Int64

	fieldMap map[string]field.Expr
}

func (r resourceMap) Table(newTableName string) *resourceMap {
	r.resourceMapDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r resourceMap) As(alias string) *resourceMap {
	r.resourceMapDo.DO = *(r.resourceMapDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *resourceMap) updateTableName(table string) *resourceMap {
	r.ALL = field.NewAsterisk(table)
	r.Id = field.NewInt64(table, "id")
	r.HexId = field.NewInt64(table, "hex_id")
	r.Resource = field.NewString(table, "resource")
	r.FileId = field.NewInt64(table, "file_id")

	r.fillFieldMap()

	return r
}

func (r *resourceMap) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *resourceMap) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 4)
	r.fieldMap["id"] = r.Id
	r.fieldMap["hex_id"] = r.HexId
	r.fieldMap["resource"] = r.Resource
	r.fieldMap["file_id"] = r.FileId
}

func (r resourceMap) clone(db *gorm.DB) resourceMap {
	r.resourceMapDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r resourceMap) replaceDB(db *gorm.DB) resourceMap {
	r.resourceMapDo.ReplaceDB(db)
	return r
}

type resourceMapDo struct{ gen.DO }

type IResourceMapDo interface {
	gen.SubQuery
	Debug() IResourceMapDo
	WithContext(ctx context.Context) IResourceMapDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IResourceMapDo
	WriteDB() IResourceMapDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IResourceMapDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IResourceMapDo
	Not(conds ...gen.Condition) IResourceMapDo
	Or(conds ...gen.Condition) IResourceMapDo
	Select(conds ...field.Expr) IResourceMapDo
	Where(conds ...gen.Condition) IResourceMapDo
	Order(conds ...field.Expr) IResourceMapDo
	Distinct(cols ...field.Expr) IResourceMapDo
	Omit(cols ...field.Expr) IResourceMapDo
	Join(table schema.Tabler, on ...field.Expr) IResourceMapDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IResourceMapDo
	RightJoin(table schema.Tabler, on ...field.Expr) IResourceMapDo
	Group(cols ...field.Expr) IResourceMapDo
	Having(conds ...gen.Condition) IResourceMapDo
	Limit(limit int) IResourceMapDo
	Offset(offset int) IResourceMapDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IResourceMapDo
	Unscoped() IResourceMapDo
	Create(values ...*db_models.ResourceMap) error
	CreateInBatches(values []*db_models.ResourceMap, batchSize int) error
	Save(values ...*db_models.ResourceMap) error
	First() (*db_models.ResourceMap, error)
	Take() (*db_models.ResourceMap, error)
	Last() (*db_models.ResourceMap, error)
	Find() ([]*db_models.ResourceMap, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*db_models.ResourceMap, err error)
	FindInBatches(result *[]*db_models.ResourceMap, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*db_models.ResourceMap) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IResourceMapDo
	Assign(attrs ...field.AssignExpr) IResourceMapDo
	Joins(fields ...field.RelationField) IResourceMapDo
	Preload(fields ...field.RelationField) IResourceMapDo
	FirstOrInit() (*db_models.ResourceMap, error)
	FirstOrCreate() (*db_models.ResourceMap, error)
	FindByPage(offset int, limit int) (result []*db_models.ResourceMap, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IResourceMapDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (r resourceMapDo) Debug() IResourceMapDo {
	return r.withDO(r.DO.Debug())
}

func (r resourceMapDo) WithContext(ctx context.Context) IResourceMapDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r resourceMapDo) ReadDB() IResourceMapDo {
	return r.Clauses(dbresolver.Read)
}

func (r resourceMapDo) WriteDB() IResourceMapDo {
	return r.Clauses(dbresolver.Write)
}

func (r resourceMapDo) Session(config *gorm.Session) IResourceMapDo {
	return r.withDO(r.DO.Session(config))
}

func (r resourceMapDo) Clauses(conds ...clause.Expression) IResourceMapDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r resourceMapDo) Returning(value interface{}, columns ...string) IResourceMapDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r resourceMapDo) Not(conds ...gen.Condition) IResourceMapDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r resourceMapDo) Or(conds ...gen.Condition) IResourceMapDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r resourceMapDo) Select(conds ...field.Expr) IResourceMapDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r resourceMapDo) Where(conds ...gen.Condition) IResourceMapDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r resourceMapDo) Order(conds ...field.Expr) IResourceMapDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r resourceMapDo) Distinct(cols ...field.Expr) IResourceMapDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r resourceMapDo) Omit(cols ...field.Expr) IResourceMapDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r resourceMapDo) Join(table schema.Tabler, on ...field.Expr) IResourceMapDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r resourceMapDo) LeftJoin(table schema.Tabler, on ...field.Expr) IResourceMapDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r resourceMapDo) RightJoin(table schema.Tabler, on ...field.Expr) IResourceMapDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r resourceMapDo) Group(cols ...field.Expr) IResourceMapDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r resourceMapDo) Having(conds ...gen.Condition) IResourceMapDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r resourceMapDo) Limit(limit int) IResourceMapDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r resourceMapDo) Offset(offset int) IResourceMapDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r resourceMapDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IResourceMapDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r resourceMapDo) Unscoped() IResourceMapDo {
	return r.withDO(r.DO.Unscoped())
}

func (r resourceMapDo) Create(values ...*db_models.ResourceMap) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r resourceMapDo) CreateInBatches(values []*db_models.ResourceMap, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r resourceMapDo) Save(values ...*db_models.ResourceMap) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r resourceMapDo) First() (*db_models.ResourceMap, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*db_models.ResourceMap), nil
	}
}

func (r resourceMapDo) Take() (*db_models.ResourceMap, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*db_models.ResourceMap), nil
	}
}

func (r resourceMapDo) Last() (*db_models.ResourceMap, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*db_models.ResourceMap), nil
	}
}

func (r resourceMapDo) Find() ([]*db_models.ResourceMap, error) {
	result, err := r.DO.Find()
	return result.([]*db_models.ResourceMap), err
}

func (r resourceMapDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*db_models.ResourceMap, err error) {
	buf := make([]*db_models.ResourceMap, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r resourceMapDo) FindInBatches(result *[]*db_models.ResourceMap, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r resourceMapDo) Attrs(attrs ...field.AssignExpr) IResourceMapDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r resourceMapDo) Assign(attrs ...field.AssignExpr) IResourceMapDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r resourceMapDo) Joins(fields ...field.RelationField) IResourceMapDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r resourceMapDo) Preload(fields ...field.RelationField) IResourceMapDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r resourceMapDo) FirstOrInit() (*db_models.ResourceMap, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*db_models.ResourceMap), nil
	}
}

func (r resourceMapDo) FirstOrCreate() (*db_models.ResourceMap, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*db_models.ResourceMap), nil
	}
}

func (r resourceMapDo) FindByPage(offset int, limit int) (result []*db_models.ResourceMap, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r resourceMapDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r resourceMapDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r resourceMapDo) Delete(models ...*db_models.ResourceMap) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *resourceMapDo) withDO(do gen.Dao) *resourceMapDo {
	r.DO = *do.(*gen.DO)
	return r
}
