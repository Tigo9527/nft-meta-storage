// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"
	"nft.house/service/db_models"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newRootIndex(db *gorm.DB, opts ...gen.DOOption) rootIndex {
	_rootIndex := rootIndex{}

	_rootIndex.rootIndexDo.UseDB(db, opts...)
	_rootIndex.rootIndexDo.UseModel(&db_models.RootIndex{})

	tableName := _rootIndex.rootIndexDo.TableName()
	_rootIndex.ALL = field.NewAsterisk(tableName)
	_rootIndex.Id = field.NewInt64(tableName, "id")
	_rootIndex.FileId = field.NewInt64(tableName, "file_id")
	_rootIndex.Root = field.NewString(tableName, "root")
	_rootIndex.TxHash = field.NewString(tableName, "tx_hash")
	_rootIndex.PaidAt = field.NewTime(tableName, "paid_at")
	_rootIndex.UploadedAt = field.NewTime(tableName, "uploaded_at")
	_rootIndex.CreatedAt = field.NewTime(tableName, "created_at")
	_rootIndex.UpdatedAt = field.NewTime(tableName, "updated_at")

	_rootIndex.fillFieldMap()

	return _rootIndex
}

type rootIndex struct {
	rootIndexDo

	ALL        field.Asterisk
	Id         field.Int64
	FileId     field.Int64
	Root       field.String
	TxHash     field.String
	PaidAt     field.Time
	UploadedAt field.Time
	CreatedAt  field.Time
	UpdatedAt  field.Time

	fieldMap map[string]field.Expr
}

func (r rootIndex) Table(newTableName string) *rootIndex {
	r.rootIndexDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r rootIndex) As(alias string) *rootIndex {
	r.rootIndexDo.DO = *(r.rootIndexDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *rootIndex) updateTableName(table string) *rootIndex {
	r.ALL = field.NewAsterisk(table)
	r.Id = field.NewInt64(table, "id")
	r.FileId = field.NewInt64(table, "file_id")
	r.Root = field.NewString(table, "root")
	r.TxHash = field.NewString(table, "tx_hash")
	r.PaidAt = field.NewTime(table, "paid_at")
	r.UploadedAt = field.NewTime(table, "uploaded_at")
	r.CreatedAt = field.NewTime(table, "created_at")
	r.UpdatedAt = field.NewTime(table, "updated_at")

	r.fillFieldMap()

	return r
}

func (r *rootIndex) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *rootIndex) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 8)
	r.fieldMap["id"] = r.Id
	r.fieldMap["file_id"] = r.FileId
	r.fieldMap["root"] = r.Root
	r.fieldMap["tx_hash"] = r.TxHash
	r.fieldMap["paid_at"] = r.PaidAt
	r.fieldMap["uploaded_at"] = r.UploadedAt
	r.fieldMap["created_at"] = r.CreatedAt
	r.fieldMap["updated_at"] = r.UpdatedAt
}

func (r rootIndex) clone(db *gorm.DB) rootIndex {
	r.rootIndexDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r rootIndex) replaceDB(db *gorm.DB) rootIndex {
	r.rootIndexDo.ReplaceDB(db)
	return r
}

type rootIndexDo struct{ gen.DO }

type IRootIndexDo interface {
	gen.SubQuery
	Debug() IRootIndexDo
	WithContext(ctx context.Context) IRootIndexDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IRootIndexDo
	WriteDB() IRootIndexDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IRootIndexDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IRootIndexDo
	Not(conds ...gen.Condition) IRootIndexDo
	Or(conds ...gen.Condition) IRootIndexDo
	Select(conds ...field.Expr) IRootIndexDo
	Where(conds ...gen.Condition) IRootIndexDo
	Order(conds ...field.Expr) IRootIndexDo
	Distinct(cols ...field.Expr) IRootIndexDo
	Omit(cols ...field.Expr) IRootIndexDo
	Join(table schema.Tabler, on ...field.Expr) IRootIndexDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IRootIndexDo
	RightJoin(table schema.Tabler, on ...field.Expr) IRootIndexDo
	Group(cols ...field.Expr) IRootIndexDo
	Having(conds ...gen.Condition) IRootIndexDo
	Limit(limit int) IRootIndexDo
	Offset(offset int) IRootIndexDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IRootIndexDo
	Unscoped() IRootIndexDo
	Create(values ...*db_models.RootIndex) error
	CreateInBatches(values []*db_models.RootIndex, batchSize int) error
	Save(values ...*db_models.RootIndex) error
	First() (*db_models.RootIndex, error)
	Take() (*db_models.RootIndex, error)
	Last() (*db_models.RootIndex, error)
	Find() ([]*db_models.RootIndex, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*db_models.RootIndex, err error)
	FindInBatches(result *[]*db_models.RootIndex, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*db_models.RootIndex) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IRootIndexDo
	Assign(attrs ...field.AssignExpr) IRootIndexDo
	Joins(fields ...field.RelationField) IRootIndexDo
	Preload(fields ...field.RelationField) IRootIndexDo
	FirstOrInit() (*db_models.RootIndex, error)
	FirstOrCreate() (*db_models.RootIndex, error)
	FindByPage(offset int, limit int) (result []*db_models.RootIndex, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IRootIndexDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (r rootIndexDo) Debug() IRootIndexDo {
	return r.withDO(r.DO.Debug())
}

func (r rootIndexDo) WithContext(ctx context.Context) IRootIndexDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r rootIndexDo) ReadDB() IRootIndexDo {
	return r.Clauses(dbresolver.Read)
}

func (r rootIndexDo) WriteDB() IRootIndexDo {
	return r.Clauses(dbresolver.Write)
}

func (r rootIndexDo) Session(config *gorm.Session) IRootIndexDo {
	return r.withDO(r.DO.Session(config))
}

func (r rootIndexDo) Clauses(conds ...clause.Expression) IRootIndexDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r rootIndexDo) Returning(value interface{}, columns ...string) IRootIndexDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r rootIndexDo) Not(conds ...gen.Condition) IRootIndexDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r rootIndexDo) Or(conds ...gen.Condition) IRootIndexDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r rootIndexDo) Select(conds ...field.Expr) IRootIndexDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r rootIndexDo) Where(conds ...gen.Condition) IRootIndexDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r rootIndexDo) Order(conds ...field.Expr) IRootIndexDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r rootIndexDo) Distinct(cols ...field.Expr) IRootIndexDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r rootIndexDo) Omit(cols ...field.Expr) IRootIndexDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r rootIndexDo) Join(table schema.Tabler, on ...field.Expr) IRootIndexDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r rootIndexDo) LeftJoin(table schema.Tabler, on ...field.Expr) IRootIndexDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r rootIndexDo) RightJoin(table schema.Tabler, on ...field.Expr) IRootIndexDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r rootIndexDo) Group(cols ...field.Expr) IRootIndexDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r rootIndexDo) Having(conds ...gen.Condition) IRootIndexDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r rootIndexDo) Limit(limit int) IRootIndexDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r rootIndexDo) Offset(offset int) IRootIndexDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r rootIndexDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IRootIndexDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r rootIndexDo) Unscoped() IRootIndexDo {
	return r.withDO(r.DO.Unscoped())
}

func (r rootIndexDo) Create(values ...*db_models.RootIndex) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r rootIndexDo) CreateInBatches(values []*db_models.RootIndex, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r rootIndexDo) Save(values ...*db_models.RootIndex) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r rootIndexDo) First() (*db_models.RootIndex, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*db_models.RootIndex), nil
	}
}

func (r rootIndexDo) Take() (*db_models.RootIndex, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*db_models.RootIndex), nil
	}
}

func (r rootIndexDo) Last() (*db_models.RootIndex, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*db_models.RootIndex), nil
	}
}

func (r rootIndexDo) Find() ([]*db_models.RootIndex, error) {
	result, err := r.DO.Find()
	return result.([]*db_models.RootIndex), err
}

func (r rootIndexDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*db_models.RootIndex, err error) {
	buf := make([]*db_models.RootIndex, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r rootIndexDo) FindInBatches(result *[]*db_models.RootIndex, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r rootIndexDo) Attrs(attrs ...field.AssignExpr) IRootIndexDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r rootIndexDo) Assign(attrs ...field.AssignExpr) IRootIndexDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r rootIndexDo) Joins(fields ...field.RelationField) IRootIndexDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r rootIndexDo) Preload(fields ...field.RelationField) IRootIndexDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r rootIndexDo) FirstOrInit() (*db_models.RootIndex, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*db_models.RootIndex), nil
	}
}

func (r rootIndexDo) FirstOrCreate() (*db_models.RootIndex, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*db_models.RootIndex), nil
	}
}

func (r rootIndexDo) FindByPage(offset int, limit int) (result []*db_models.RootIndex, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r rootIndexDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r rootIndexDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r rootIndexDo) Delete(models ...*db_models.RootIndex) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *rootIndexDo) withDO(do gen.Dao) *rootIndexDo {
	r.DO = *do.(*gen.DO)
	return r
}
