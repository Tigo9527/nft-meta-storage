// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q              = new(Query)
	Config         *config
	FileEntry      *fileEntry
	FileStoreQueue *fileStoreQueue
	FileTxQueue    *fileTxQueue
	Hex64          *hex64
	Migration      *migration
	ResourceMap    *resourceMap
	RootIndex      *rootIndex
	UrlEntry       *urlEntry
	User           *user
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	Config = &Q.Config
	FileEntry = &Q.FileEntry
	FileStoreQueue = &Q.FileStoreQueue
	FileTxQueue = &Q.FileTxQueue
	Hex64 = &Q.Hex64
	Migration = &Q.Migration
	ResourceMap = &Q.ResourceMap
	RootIndex = &Q.RootIndex
	UrlEntry = &Q.UrlEntry
	User = &Q.User
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:             db,
		Config:         newConfig(db, opts...),
		FileEntry:      newFileEntry(db, opts...),
		FileStoreQueue: newFileStoreQueue(db, opts...),
		FileTxQueue:    newFileTxQueue(db, opts...),
		Hex64:          newHex64(db, opts...),
		Migration:      newMigration(db, opts...),
		ResourceMap:    newResourceMap(db, opts...),
		RootIndex:      newRootIndex(db, opts...),
		UrlEntry:       newUrlEntry(db, opts...),
		User:           newUser(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Config         config
	FileEntry      fileEntry
	FileStoreQueue fileStoreQueue
	FileTxQueue    fileTxQueue
	Hex64          hex64
	Migration      migration
	ResourceMap    resourceMap
	RootIndex      rootIndex
	UrlEntry       urlEntry
	User           user
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:             db,
		Config:         q.Config.clone(db),
		FileEntry:      q.FileEntry.clone(db),
		FileStoreQueue: q.FileStoreQueue.clone(db),
		FileTxQueue:    q.FileTxQueue.clone(db),
		Hex64:          q.Hex64.clone(db),
		Migration:      q.Migration.clone(db),
		ResourceMap:    q.ResourceMap.clone(db),
		RootIndex:      q.RootIndex.clone(db),
		UrlEntry:       q.UrlEntry.clone(db),
		User:           q.User.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:             db,
		Config:         q.Config.replaceDB(db),
		FileEntry:      q.FileEntry.replaceDB(db),
		FileStoreQueue: q.FileStoreQueue.replaceDB(db),
		FileTxQueue:    q.FileTxQueue.replaceDB(db),
		Hex64:          q.Hex64.replaceDB(db),
		Migration:      q.Migration.replaceDB(db),
		ResourceMap:    q.ResourceMap.replaceDB(db),
		RootIndex:      q.RootIndex.replaceDB(db),
		UrlEntry:       q.UrlEntry.replaceDB(db),
		User:           q.User.replaceDB(db),
	}
}

type queryCtx struct {
	Config         IConfigDo
	FileEntry      IFileEntryDo
	FileStoreQueue IFileStoreQueueDo
	FileTxQueue    IFileTxQueueDo
	Hex64          IHex64Do
	Migration      IMigrationDo
	ResourceMap    IResourceMapDo
	RootIndex      IRootIndexDo
	UrlEntry       IUrlEntryDo
	User           IUserDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Config:         q.Config.WithContext(ctx),
		FileEntry:      q.FileEntry.WithContext(ctx),
		FileStoreQueue: q.FileStoreQueue.WithContext(ctx),
		FileTxQueue:    q.FileTxQueue.WithContext(ctx),
		Hex64:          q.Hex64.WithContext(ctx),
		Migration:      q.Migration.WithContext(ctx),
		ResourceMap:    q.ResourceMap.WithContext(ctx),
		RootIndex:      q.RootIndex.WithContext(ctx),
		UrlEntry:       q.UrlEntry.WithContext(ctx),
		User:           q.User.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
